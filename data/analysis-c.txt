--------------------------------------------------------------------------------
Profile data file 'callgrind.out.274710' (creator: callgrind-3.22.0)
--------------------------------------------------------------------------------
I1 cache: 32768 B, 64 B, 8-way associative
D1 cache: 32768 B, 64 B, 8-way associative
LL cache: 6291456 B, 64 B, 12-way associative
Timerange: Basic block 0 - 239548
Trigger: Program termination
Profiled target:  ./fibo (PID 274710, part 1)
Events recorded:  Ir Dr Dw I1mr D1mr D1mw ILmr DLmr DLmw Bc Bcm Bi Bim
Events shown:     Ir Dr Dw I1mr D1mr D1mw ILmr DLmr DLmw Bc Bcm Bi Bim
Event sort order: Ir Dr Dw I1mr D1mr D1mw ILmr DLmr DLmw Bc Bcm Bi Bim
Thresholds:       99 0 0 0 0 0 0 0 0 0 0 0 0
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                 Dr               Dw               I1mr           D1mr         D1mw         ILmr           DLmr         DLmw         Bc              Bcm            Bi           Bim          
--------------------------------------------------------------------------------
2,006,820 (100.0%) 741,254 (100.0%) 392,990 (100.0%) 1,124 (100.0%) 997 (100.0%) 539 (100.0%) 1,108 (100.0%) 800 (100.0%) 517 (100.0%) 76,534 (100.0%) 3,378 (100.0%) 294 (100.0%) 156 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir               Dr               Dw               I1mr        D1mr         D1mw         ILmr        DLmr         DLmw         Bc              Bcm          Bi           Bim          file:function
--------------------------------------------------------------------------------
520,000 (25.91%) 220,000 (29.68%) 100,000 (25.45%)  1 ( 0.09%)   0            0           1 ( 0.09%)   0            0          20,000 (26.13%)   6 ( 0.18%)   .           .           fibo.c:dequeue [/home/puppy/ming/hi/fibo]
520,000 (25.91%) 200,000 (26.98%) 120,000 (30.54%)  2 ( 0.18%)   0            0           2 ( 0.18%)   0            0          20,000 (26.13%)   6 ( 0.18%)   .           .           fibo.c:enqueue [/home/puppy/ming/hi/fibo]
300,000 (14.95%) 120,000 (16.19%)  40,000 (10.18%)  1 ( 0.09%)   0            0           1 ( 0.09%)   .            .               .            .            .           .           fibo.c:isFull [/home/puppy/ming/hi/fibo]
280,000 (13.95%) 120,000 (16.19%)  40,000 (10.18%)  0            0            1 ( 0.19%)  .            .            .               .            .            .           .           fibo.c:isEmpty [/home/puppy/ming/hi/fibo]
250,047 (12.46%)  50,001 ( 6.75%)  80,035 (20.37%)  6 ( 0.53%)   0            5 ( 0.93%)  6 ( 0.54%)   0            0          10,034 (13.11%)  15 ( 0.44%)   .           .           fibo.c:main [/home/puppy/ming/hi/fibo]
 24,511 ( 1.22%)   8,821 ( 1.19%)   3,309 ( 0.84%) 16 ( 1.42%) 166 (16.65%)   4 ( 0.74%) 16 ( 1.44%) 154 (19.25%)   4 ( 0.77%)  3,676 ( 4.80%) 286 ( 8.47%)   .           .           ./elf/./elf/dl-lookup.c:do_lookup_x [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
 22,019 ( 1.10%)   3,752 ( 0.51%)       6 ( 0.00%)  6 ( 0.53%)  63 ( 6.32%)   0           6 ( 0.54%)  63 ( 7.88%)   0           5,929 ( 7.75%) 526 (15.57%)   .           .           ./elf/./elf/dl-tunables.c:__GI___tunables_init [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
 15,598 ( 0.78%)   1,494 ( 0.20%)   1,845 ( 0.47%) 29 ( 2.58%) 103 (10.33%) 195 (36.18%) 29 ( 2.62%)  74 ( 9.25%) 195 (37.72%)  4,408 ( 5.76%) 526 (15.57%)   .           .           ./elf/./elf/dl-reloc.c:_dl_relocate_object [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
  9,453 ( 0.47%)   2,605 ( 0.35%)   2,255 ( 0.57%) 11 ( 0.98%)   2 ( 0.20%)   3 ( 0.56%) 11 ( 0.99%)   1 ( 0.12%)   3 ( 0.58%)  1,051 ( 1.37%)  86 ( 2.55%)   .           .           ./elf/./elf/dl-lookup.c:_dl_lookup_symbol_x [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
  9,368 ( 0.47%)   1,546 ( 0.21%)       0           2 ( 0.18%) 100 (10.03%)   0           2 ( 0.18%)  98 (12.25%)   0           1,546 ( 2.02%) 124 ( 3.67%)   .           .           ./elf/../sysdeps/generic/dl-new-hash.h:_dl_lookup_symbol_x
  5,916 ( 0.29%)   1,250 ( 0.17%)       0          47 ( 4.18%)  45 ( 4.51%)   0          47 ( 4.24%)  37 ( 4.62%)   0             678 ( 0.89%) 154 ( 4.56%)  44 (14.97%) 35 (22.44%)  ./string/../sysdeps/x86_64/multiarch/../multiarch/strcmp-sse2.S:strcmp [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
  5,688 ( 0.28%)   1,869 ( 0.25%)     599 ( 0.15%) 15 ( 1.33%) 112 (11.23%)   0          15 ( 1.35%)  99 (12.38%)   0             642 ( 0.84%)  87 ( 2.58%)   .           .           ./elf/./elf/do-rel.h:_dl_relocate_object
  5,599 ( 0.28%)   1,799 ( 0.24%)     676 ( 0.17%)  6 ( 0.53%)  34 ( 3.41%)   1 ( 0.19%)  6 ( 0.54%)  26 ( 3.25%)   1 ( 0.19%)    670 ( 0.88%)  36 ( 1.07%)   .           .           ./elf/./elf/dl-lookup.c:check_match [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
  3,880 ( 0.19%)     971 ( 0.13%)     250 ( 0.06%) 13 ( 1.16%)   7 ( 0.70%)  32 ( 5.94%) 13 ( 1.17%)   6 ( 0.75%)  25 ( 4.84%)    931 ( 1.22%)  46 ( 1.36%) 163 (55.44%) 65 (41.67%)  ./elf/../sysdeps/x86_64/dl-machine.h:_dl_relocate_object
  3,096 ( 0.15%)     492 ( 0.07%)      96 ( 0.02%) 10 ( 0.89%)   6 ( 0.60%)   0          10 ( 0.90%)   6 ( 0.75%)   0           1,108 ( 1.45%) 112 ( 3.32%)   .           .           ./elf/../sysdeps/x86/dl-cacheinfo.h:intel_check_word.constprop.0 [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
  2,652 ( 0.13%)     876 ( 0.12%)     272 ( 0.07%) 23 ( 2.05%)  34 ( 3.41%)  22 ( 4.08%) 23 ( 2.08%)  31 ( 3.88%)  22 ( 4.26%)    492 ( 0.64%)  89 ( 2.63%)   .           .           ./elf/./elf/dl-version.c:_dl_check_map_versions [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
  2,268 ( 0.11%)       0                0           1 ( 0.09%)   0            0           1 ( 0.09%)   0            0             372 ( 0.49%)  38 ( 1.12%)   .           .           ./elf/../bits/stdlib-bsearch.h:intel_check_word.constprop.0
  1,803 ( 0.09%)     501 ( 0.07%)       0           1 ( 0.09%)   1 ( 0.10%)   0           1 ( 0.09%)   1 ( 0.12%)   0             537 ( 0.70%)  47 ( 1.39%)   .           .           ./elf/./elf/dl-tunables.h:__GI___tunables_init
  1,558 ( 0.08%)     318 ( 0.04%)     162 ( 0.04%) 43 ( 3.83%)  39 ( 3.91%)  10 ( 1.86%) 43 ( 3.88%)  39 ( 4.88%)  10 ( 1.93%)    318 ( 0.42%)  92 ( 2.72%)   .           .           ./elf/./elf/dl-load.c:_dl_map_object_from_fd [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
  1,148 ( 0.06%)     254 ( 0.03%)     133 ( 0.03%) 65 ( 5.78%)  33 ( 3.31%)   8 ( 1.48%) 65 ( 5.87%)  20 ( 2.50%)   6 ( 1.16%)    245 ( 0.32%)  82 ( 2.43%)  11 ( 3.74%)  7 ( 4.49%)  ./elf/./elf/rtld.c:dl_main [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
  1,003 ( 0.05%)     177 ( 0.02%)     108 ( 0.03%) 30 ( 2.67%)   1 ( 0.10%)   7 ( 1.30%) 30 ( 2.71%)   1 ( 0.12%)   7 ( 1.35%)    245 ( 0.32%)  60 ( 1.78%)   .           .           ./elf/./elf/dl-deps.c:_dl_map_object_deps [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    792 ( 0.04%)     118 ( 0.02%)       0           4 ( 0.36%)   8 ( 0.80%)   0           4 ( 0.36%)   8 ( 1.00%)   0             214 ( 0.28%)  27 ( 0.80%)   .           .           ./elf/./elf/dl-cache.c:_dl_cache_libcmp [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]
    774 ( 0.04%)     172 ( 0.02%)     175 ( 0.04%)  6 ( 0.53%)   2 ( 0.20%)   0           6 ( 0.54%)   1 ( 0.12%)   0              76 ( 0.10%)   6 ( 0.18%)   .           .           ./elf/./elf/dl-minimal-malloc.c:__minimal_malloc [/usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2]

--------------------------------------------------------------------------------
-- Auto-annotated source: fibo.c
--------------------------------------------------------------------------------
Ir               Dr              Dw              I1mr       D1mr       D1mw       ILmr       DLmr       DLmw       Bc              Bcm         Bi Bim 

-- line 6 ----------------------------------------
      .               .               .          .          .          .          .          .          .               .           .          .          .           #define MAX_SIZE 32
      .               .               .          .          .          .          .          .          .               .           .          .          .           #define FIBO_NUM 10000
      .               .               .          .          .          .          .          .          .               .           .          .          .           typedef struct {
      .               .               .          .          .          .          .          .          .               .           .          .          .               uint64_t items[MAX_SIZE];
      .               .               .          .          .          .          .          .          .               .           .          .          .               uint32_t head;
      .               .               .          .          .          .          .          .          .               .           .          .          .               uint32_t tail;
      .               .               .          .          .          .          .          .          .               .           .          .          .           } queue;
      .               .               .          .          .          .          .          .          .               .           .          .          .           
 80,000 ( 3.99%)      0          40,000 (10.18%) 0          0          1 ( 0.19%) .          .          .               .           .          .          .           bool isEmpty(queue *q) {
160,000 ( 7.97%) 80,000 (10.79%)      .          .          .          .          .          .          .               .           .          .          .               return (q->head % MAX_SIZE) == (q->tail % MAX_SIZE);
 40,000 ( 1.99%) 40,000 ( 5.40%)      .          .          .          .          .          .          .               .           .          .          .           }
      .               .               .          .          .          .          .          .          .               .           .          .          .           
 80,000 ( 3.99%)      0          40,000 (10.18%) 1 ( 0.09%) 0          0          1 ( 0.09%) .          .               .           .          .          .           bool isFull(queue *q) {
180,000 ( 8.97%) 80,000 (10.79%)      .          .          .          .          .          .          .               .           .          .          .               return ((q->tail + 1) % MAX_SIZE) == (q->head % MAX_SIZE);
 40,000 ( 1.99%) 40,000 ( 5.40%)      .          .          .          .          .          .          .               .           .          .          .           }
      .               .               .          .          .          .          .          .          .               .           .          .          .           
120,000 ( 5.98%)      0          60,000 (15.27%) 1 ( 0.09%) 0          0          1 ( 0.09%) .          .               .           .          .          .           void enqueue(queue *q, uint64_t value) {
100,000 ( 4.98%) 20,000 ( 2.70%) 20,000 ( 5.09%) 0          0          0          0          0          0          20,000 (26.13%)  6 ( 0.18%) .          .               if (isFull(q)) {
300,000 (14.95%) 120,000 (16.19%) 40,000 (10.18%) 1 ( 0.09%) 0          0          1 ( 0.09%) .          .               .           .          .          .           => fibo.c:isFull (20,000x)
      .               .               .          .          .          .          .          .          .               .           .          .          .                   printf("queue is full\n");
      .               .               .          .          .          .          .          .          .               .           .          .          .                   return;
      .               .               .          .          .          .          .          .          .               .           .          .          .               }
      .               .               .          .          .          .          .          .          .               .           .          .          .           
120,000 ( 5.98%) 80,000 (10.79%) 20,000 ( 5.09%) 1 ( 0.09%) 0          0          1 ( 0.09%) .          .               .           .          .          .               q->items[q->tail] = value;
140,000 ( 6.98%) 60,000 ( 8.09%) 20,000 ( 5.09%) .          .          .          .          .          .               .           .          .          .               q->tail = (q->tail + 1) % MAX_SIZE;
 40,000 ( 1.99%) 40,000 ( 5.40%)      .          .          .          .          .          .          .               .           .          .          .           }
      .               .               .          .          .          .          .          .          .               .           .          .          .           
100,000 ( 4.98%)      0          40,000 (10.18%) .          .          .          .          .          .               .           .          .          .           uint64_t dequeue(queue *q) {
100,000 ( 4.98%) 20,000 ( 2.70%) 20,000 ( 5.09%) 1 ( 0.09%) 0          0          1 ( 0.09%) 0          0          20,000 (26.13%)  6 ( 0.18%) .          .               if (isEmpty(q)) {
280,000 (13.95%) 120,000 (16.19%) 40,000 (10.18%) 0          0          1 ( 0.19%) .          .          .               .           .          .          .           => fibo.c:isEmpty (20,000x)
      .               .               .          .          .          .          .          .          .               .           .          .          .                   printf("queue is empty\n");
      .               .               .          .          .          .          .          .          .               .           .          .          .                   return 0;
      .               .               .          .          .          .          .          .          .               .           .          .          .               }
120,000 ( 5.98%) 80,000 (10.79%) 20,000 ( 5.09%) .          .          .          .          .          .               .           .          .          .               uint64_t value = q->items[q->head];
140,000 ( 6.98%) 60,000 ( 8.09%) 20,000 ( 5.09%) .          .          .          .          .          .               .           .          .          .               q->head = (q->head + 1) % MAX_SIZE;
 20,000 ( 1.00%) 20,000 ( 2.70%)      .          .          .          .          .          .          .               .           .          .          .               return value;
 40,000 ( 1.99%) 40,000 ( 5.40%)      .          .          .          .          .          .          .               .           .          .          .           }
      .               .               .          .          .          .          .          .          .               .           .          .          .           
      7 ( 0.00%)      1 ( 0.00%)      2 ( 0.00%) 1 ( 0.09%) 0          0          1 ( 0.09%) .          .               .           .          .          .           int main() {
     38 ( 0.00%)      0              33 ( 0.01%) 1 ( 0.09%) 0          4 ( 0.74%) 1 ( 0.09%) 0          0              33 ( 0.04%) 10 ( 0.30%) .          .               queue my_queue = {0};
      1 ( 0.00%)      0               1 ( 0.00%) .          .          .          .          .          .               .           .          .          .               my_queue.head = 0;
      1 ( 0.00%)      0               1 ( 0.00%) .          .          .          .          .          .               .           .          .          .               my_queue.tail = 0;
      .               .               .          .          .          .          .          .          .               .           .          .          .           
      4 ( 0.00%)      0               1 ( 0.00%) 0          0          1 ( 0.19%) .          .          .               .           .          .          .               enqueue(&my_queue, 0);  // F(0) = 0
     41 ( 0.00%)     16 ( 0.00%)      8 ( 0.00%) 3 ( 0.27%) 0          0          3 ( 0.27%) 0          0               1 ( 0.00%)  1 ( 0.03%) .          .           => fibo.c:enqueue (1x)
      4 ( 0.00%)      0               1 ( 0.00%) 1 ( 0.09%) 0          0          1 ( 0.09%) .          .               .           .          .          .               enqueue(&my_queue, 1);  // F(1) = 1
     41 ( 0.00%)     16 ( 0.00%)      8 ( 0.00%) 0          0          0          0          0          0               1 ( 0.00%)  1 ( 0.03%) .          .           => fibo.c:enqueue (1x)
      .               .               .          .          .          .          .          .          .               .           .          .          .           
 30,001 ( 1.49%) 10,000 ( 1.35%) 10,000 ( 2.54%) 1 ( 0.09%) 0          0          1 ( 0.09%) 0          0          10,000 (13.07%)  4 ( 0.12%) .          .               for (int i = 2; i <= FIBO_NUM; i++) {
 39,996 ( 1.99%)      0          19,998 ( 5.09%) .          .          .          .          .          .               .           .          .          .                   uint64_t a = dequeue(&my_queue);
399,960 (19.93%) 169,983 (22.93%) 69,993 (17.81%) 1 ( 0.09%) 0          1 ( 0.19%) 1 ( 0.09%) 0          0           9,999 (13.06%)  2 ( 0.06%) .          .           => fibo.c:dequeue (9,999x)
 39,996 ( 1.99%)      0          19,998 ( 5.09%) 1 ( 0.09%) 0          0          1 ( 0.09%) .          .               .           .          .          .                   uint64_t b = dequeue(&my_queue);
399,960 (19.93%) 169,983 (22.93%) 69,993 (17.81%) 0          0          0          0          0          0           9,999 (13.06%)  2 ( 0.06%) .          .           => fibo.c:dequeue (9,999x)
 39,996 ( 1.99%) 19,998 ( 2.70%)  9,999 ( 2.54%) .          .          .          .          .          .               .           .          .          .                   uint64_t next_fib = a + b;
 49,995 ( 2.49%)  9,999 ( 1.35%)  9,999 ( 2.54%) .          .          .          .          .          .               .           .          .          .                   enqueue(&my_queue, b);
409,959 (20.43%) 159,984 (21.58%) 79,992 (20.35%) 0          0          0          0          0          0           9,999 (13.06%)  2 ( 0.06%) .          .           => fibo.c:enqueue (9,999x)
 49,995 ( 2.49%)  9,999 ( 1.35%)  9,999 ( 2.54%) .          .          .          .          .          .               .           .          .          .                   enqueue(&my_queue, next_fib);
409,959 (20.43%) 159,984 (21.58%) 79,992 (20.35%) 0          0          0          0          0          0           9,999 (13.06%)  2 ( 0.06%) .          .           => fibo.c:enqueue (9,999x)
      .               .               .          .          .          .          .          .          .               .           .          .          .               }
      .               .               .          .          .          .          .          .          .               .           .          .          .           
      .               .               .          .          .          .          .          .          .               .           .          .          .               // Dequeue twice to get to the last calculated Fibonacci number
      3 ( 0.00%)      0               1 ( 0.00%) .          .          .          .          .          .               .           .          .          .               dequeue(&my_queue);
     40 ( 0.00%)     17 ( 0.00%)      7 ( 0.00%) 0          0          0          0          0          0               1 ( 0.00%)  1 ( 0.03%) .          .           => fibo.c:dequeue (1x)
      4 ( 0.00%)      0               2 ( 0.00%) 1 ( 0.09%) 0          0          1 ( 0.09%) .          .               .           .          .          .               uint64_t fib = dequeue(&my_queue);
     40 ( 0.00%)     17 ( 0.00%)      7 ( 0.00%) 0          0          0          0          0          0               1 ( 0.00%)  1 ( 0.03%) .          .           => fibo.c:dequeue (1x)
      .               .               .          .          .          .          .          .          .               .           .          .          .           
      .               .               .          .          .          .          .          .          .               .           .          .          .               // printf("Fibonacci number F(%d): %lu\n", FIBO_NUM, fib);
      1 ( 0.00%)      .               .          .          .          .          .          .          .               .           .          .          .               return 0;
      5 ( 0.00%)      4 ( 0.00%)      0          0          0          0          0          0          0               1 ( 0.00%)  1 ( 0.03%) .          .           }

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./elf/../bits/stdlib-bsearch.h
  ./elf/../sysdeps/generic/dl-new-hash.h
  ./elf/../sysdeps/x86/dl-cacheinfo.h
  ./elf/../sysdeps/x86_64/dl-machine.h
  ./elf/./elf/dl-cache.c
  ./elf/./elf/dl-deps.c
  ./elf/./elf/dl-load.c
  ./elf/./elf/dl-lookup.c
  ./elf/./elf/dl-minimal-malloc.c
  ./elf/./elf/dl-reloc.c
  ./elf/./elf/dl-tunables.c
  ./elf/./elf/dl-tunables.h
  ./elf/./elf/dl-version.c
  ./elf/./elf/do-rel.h
  ./elf/./elf/rtld.c
  ./string/../sysdeps/x86_64/multiarch/../multiarch/strcmp-sse2.S

--------------------------------------------------------------------------------
Ir                 Dr               Dw               I1mr        D1mr       D1mw       ILmr        DLmr       DLmw       Bc              Bcm         Bi Bim 
--------------------------------------------------------------------------------
1,870,047 (93.18%) 710,001 (95.78%) 380,035 (96.70%) 10 ( 0.89%) 0          6 ( 1.11%) 10 ( 0.90%) 0          0          50,034 (65.37%) 27 ( 0.80%) .          .           events annotated

